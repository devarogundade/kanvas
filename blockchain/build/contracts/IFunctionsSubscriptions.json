{
  "contractName": "IFunctionsSubscriptions",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "balance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "blockedBalance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "proposedOwner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "consumers",
              "type": "address[]"
            },
            {
              "internalType": "bytes32",
              "name": "flags",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IFunctionsSubscriptions.Subscription",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionIdStart",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionIdEnd",
          "type": "uint64"
        }
      ],
      "name": "getSubscriptionsInRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "balance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "blockedBalance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "proposedOwner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "consumers",
              "type": "address[]"
            },
            {
              "internalType": "bytes32",
              "name": "flags",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IFunctionsSubscriptions.Subscription[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "getConsumer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "initiatedRequests",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "completedRequests",
              "type": "uint64"
            }
          ],
          "internalType": "struct IFunctionsSubscriptions.Consumer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "requestId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "coordinator",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "estimatedTotalCostJuels",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "adminFee",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "donFee",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "gasOverheadBeforeCallback",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "gasOverheadAfterCallback",
              "type": "uint40"
            },
            {
              "internalType": "uint32",
              "name": "timeoutTimestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct FunctionsResponse.Commitment[]",
          "name": "requestsToTimeoutByCommitment",
          "type": "tuple[]"
        }
      ],
      "name": "timeoutRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "oracleWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "ownerCancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "createSubscriptionWithConsumer",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "proposeSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "acceptSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "flags",
          "type": "bytes32"
        }
      ],
      "name": "setFlags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "getFlags",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"createSubscriptionWithConsumer\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getConsumer\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"initiatedRequests\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"completedRequests\",\"type\":\"uint64\"}],\"internalType\":\"struct IFunctionsSubscriptions.Consumer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"blockedBalance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFunctionsSubscriptions.Subscription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionIdStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionIdEnd\",\"type\":\"uint64\"}],\"name\":\"getSubscriptionsInRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"blockedBalance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFunctionsSubscriptions.Subscription[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"oracleWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"ownerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"name\":\"setFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"estimatedTotalCostJuels\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"donFee\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadBeforeCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadAfterCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct FunctionsResponse.Commitment[]\",\"name\":\"requestsToTimeoutByCommitment\",\"type\":\"tuple[]\"}],\"name\":\"timeoutRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\",\"params\":{\"subscriptionId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"subscriptionId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));\",\"returns\":{\"_0\":\"subscriptionId - A unique subscription id.\"}},\"createSubscriptionWithConsumer(address)\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));\",\"returns\":{\"subscriptionId\":\"- A unique subscription id.\"}},\"getConsumer(address,uint64)\":{\"params\":{\"client\":\"- the consumer contract address\",\"subscriptionId\":\"- the ID of the subscription\"},\"returns\":{\"_0\":\"consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\"}},\"getFlags(uint64)\":{\"params\":{\"subscriptionId\":\"- ID of the subscription\"},\"returns\":{\"_0\":\"flags - current flag values\"}},\"getSubscription(uint64)\":{\"params\":{\"subscriptionId\":\"- the ID of the subscription\"},\"returns\":{\"_0\":\"subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\"}},\"getSubscriptionCount()\":{\"returns\":{\"_0\":\"count - total number of subscriptions in the system\"}},\"getSubscriptionsInRange(uint64,uint64)\":{\"params\":{\"subscriptionIdEnd\":\"- the ID of the subscription to end the range at\",\"subscriptionIdStart\":\"- the ID of the subscription to start the range at\"},\"returns\":{\"_0\":\"subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\"}},\"getTotalBalance()\":{\"returns\":{\"_0\":\"totalBalance - total Juels of LINK held by the contract\"}},\"oracleWithdraw(address,uint96)\":{\"params\":{\"amount\":\"amount to withdraw\",\"recipient\":\"where to send the funds\"}},\"ownerCancelSubscription(uint64)\":{\"details\":\"Only callable by the Router Ownernotably can be called even if there are pending requests, outstanding ones may fail onchain\",\"params\":{\"subscriptionId\":\"subscription id\"}},\"pendingRequestExists(uint64)\":{\"details\":\"Looping is bounded to MAX_CONSUMERS*(number of DONs).Used to disable subscription canceling while outstanding request are present.\",\"params\":{\"subscriptionId\":\"- ID of the subscription\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the subscription, false otherwise.\"}},\"proposeSubscriptionOwnerTransfer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"recoverFunds(address)\":{\"details\":\"Only callable by the Router Owner\",\"params\":{\"to\":\"address to send link to\"}},\"removeConsumer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"setFlags(uint64,bytes32)\":{\"params\":{\"flags\":\"- desired flag values\",\"subscriptionId\":\"- ID of the subscription\"}},\"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])\":{\"details\":\"The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\",\"params\":{\"requestsToTimeoutByCommitment\":\"- A list of request commitments to time out\"}}},\"title\":\"Chainlink Functions Subscription interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Accept an ownership transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a Chainlink Functions subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a new subscription.\"},\"createSubscriptionWithConsumer(address)\":{\"notice\":\"Create a new subscription and add a consumer.\"},\"getConsumer(address,uint64)\":{\"notice\":\"Get details about a consumer of a subscription.\"},\"getFlags(uint64)\":{\"notice\":\"Get flags for a given subscription.\"},\"getSubscription(uint64)\":{\"notice\":\"Get details about a subscription.\"},\"getSubscriptionCount()\":{\"notice\":\"Get details about the total number of subscription accounts\"},\"getSubscriptionsInRange(uint64,uint64)\":{\"notice\":\"Retrieve details about multiple subscriptions using an inclusive range\"},\"getTotalBalance()\":{\"notice\":\"Get details about the total amount of LINK within the system\"},\"oracleWithdraw(address,uint96)\":{\"notice\":\"Oracle withdraw LINK earned through fulfilling requestsIf amount is 0 the full balance will be withdrawnBoth signing and transmitting wallets will have a balance to withdraw\"},\"ownerCancelSubscription(uint64)\":{\"notice\":\"Owner cancel subscription, sends remaining link directly to the subscription owner.\"},\"pendingRequestExists(uint64)\":{\"notice\":\"Check to see if there exists a request commitment for all consumers for a given sub.\"},\"proposeSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Propose a new owner for a subscription.\"},\"recoverFunds(address)\":{\"notice\":\"Recover link sent with transfer instead of transferAndCall.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a Chainlink Functions subscription.\"},\"setFlags(uint64,bytes32)\":{\"notice\":\"Set subscription specific flags for a subscription. Each byte of the flag is used to represent a resource tier that the subscription can utilize.\"},\"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])\":{\"notice\":\"Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":\"IFunctionsSubscriptions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0775cd55699e89e5f3df452de2c2273e00e51d79feb2b0c2d36e856cfeb1bd4b\",\"dweb:/ipfs/QmQDoC1hJhYYEg8SZouhkZ5BgC7mhqn4Ymgo5tvV3iYUgg\"]},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7b1d4d5fd839fb620c7f230a7d9d957bba6efbdec6964362c6603211b902ccc\",\"dweb:/ipfs/QmXAAGcbJP4GSpjBqc9Z8KA5wwdv6Q2FsYZt1LP2GM5AJT\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {FunctionsResponse} from \"../libraries/FunctionsResponse.sol\";\n\n/// @title Chainlink Functions Subscription interface.\ninterface IFunctionsSubscriptions {\n  struct Subscription {\n    uint96 balance; // ═════════╗ Common LINK balance that is controlled by the Router to be used for all consumer requests.\n    address owner; // ══════════╝ The owner can fund/withdraw/cancel the subscription.\n    uint96 blockedBalance; // ══╗ LINK balance that is reserved to pay for pending consumer requests.\n    address proposedOwner; // ══╝ For safely transferring sub ownership.\n    address[] consumers; // ════╸ Client contracts that can use the subscription\n    bytes32 flags; // ══════════╸ Per-subscription flags\n  }\n\n  struct Consumer {\n    bool allowed; // ══════════════╗ Owner can fund/withdraw/cancel the sub.\n    uint64 initiatedRequests; //   ║ The number of requests that have been started\n    uint64 completedRequests; // ══╝ The number of requests that have successfully completed or timed out\n  }\n\n  /// @notice Get details about a subscription.\n  /// @param subscriptionId - the ID of the subscription\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\n\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\n  function getSubscriptionsInRange(\n    uint64 subscriptionIdStart,\n    uint64 subscriptionIdEnd\n  ) external view returns (Subscription[] memory);\n\n  /// @notice Get details about a consumer of a subscription.\n  /// @param client - the consumer contract address\n  /// @param subscriptionId - the ID of the subscription\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\n\n  /// @notice Get details about the total amount of LINK within the system\n  /// @return totalBalance - total Juels of LINK held by the contract\n  function getTotalBalance() external view returns (uint96);\n\n  /// @notice Get details about the total number of subscription accounts\n  /// @return count - total number of subscriptions in the system\n  function getSubscriptionCount() external view returns (uint64);\n\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\n  /// @dev The commitment can be found on the \"OracleRequest\" event created when sending the request.\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\n\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\n  /// @notice If amount is 0 the full balance will be withdrawn\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\n  /// @param recipient where to send the funds\n  /// @param amount amount to withdraw\n  function oracleWithdraw(address recipient, uint96 amount) external;\n\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\n  /// @dev Only callable by the Router Owner\n  /// @param subscriptionId subscription id\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\n  function ownerCancelSubscription(uint64 subscriptionId) external;\n\n  /// @notice Recover link sent with transfer instead of transferAndCall.\n  /// @dev Only callable by the Router Owner\n  /// @param to address to send link to\n  function recoverFunds(address to) external;\n\n  /// @notice Create a new subscription.\n  /// @return subscriptionId - A unique subscription id.\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n  /// @dev Note to fund the subscription, use transferAndCall. For example\n  /// @dev  LINKTOKEN.transferAndCall(\n  /// @dev    address(ROUTER),\n  /// @dev    amount,\n  /// @dev    abi.encode(subscriptionId));\n  function createSubscription() external returns (uint64);\n\n  /// @notice Create a new subscription and add a consumer.\n  /// @return subscriptionId - A unique subscription id.\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n  /// @dev Note to fund the subscription, use transferAndCall. For example\n  /// @dev  LINKTOKEN.transferAndCall(\n  /// @dev    address(ROUTER),\n  /// @dev    amount,\n  /// @dev    abi.encode(subscriptionId));\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\n\n  /// @notice Propose a new owner for a subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param newOwner - proposed new owner of the subscription\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\n\n  /// @notice Accept an ownership transfer.\n  /// @param subscriptionId - ID of the subscription\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\n\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param consumer - Consumer to remove from the subscription\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\n\n  /// @notice Add a consumer to a Chainlink Functions subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param consumer - New consumer which can use the subscription\n  function addConsumer(uint64 subscriptionId, address consumer) external;\n\n  /// @notice Cancel a subscription\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param to - Where to send the remaining LINK to\n  function cancelSubscription(uint64 subscriptionId, address to) external;\n\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\n  /// @param subscriptionId - ID of the subscription\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\n  /// @dev Used to disable subscription canceling while outstanding request are present.\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\n\n  /// @notice Set subscription specific flags for a subscription.\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\n  /// @param subscriptionId - ID of the subscription\n  /// @param flags - desired flag values\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\n\n  /// @notice Get flags for a given subscription.\n  /// @param subscriptionId - ID of the subscription\n  /// @return flags - current flag values\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\n}\n",
  "sourcePath": "@chainlink\\contracts\\src\\v0.8\\functions\\dev\\v1_0_0\\interfaces\\IFunctionsSubscriptions.sol",
  "ast": {
    "absolutePath": "@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol",
    "exportedSymbols": {
      "FunctionsResponse": [
        1099
      ],
      "IFunctionsSubscriptions": [
        576
      ]
    },
    "id": 577,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 403,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:7"
      },
      {
        "absolutePath": "@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol",
        "file": "../libraries/FunctionsResponse.sol",
        "id": 405,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 577,
        "sourceUnit": 1100,
        "src": "58:69:7",
        "symbolAliases": [
          {
            "foreign": {
              "id": 404,
              "name": "FunctionsResponse",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1099,
              "src": "66:17:7",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFunctionsSubscriptions",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 406,
          "nodeType": "StructuredDocumentation",
          "src": "129:55:7",
          "text": "@title Chainlink Functions Subscription interface."
        },
        "fullyImplemented": false,
        "id": 576,
        "linearizedBaseContracts": [
          576
        ],
        "name": "IFunctionsSubscriptions",
        "nameLocation": "194:23:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "IFunctionsSubscriptions.Subscription",
            "id": 420,
            "members": [
              {
                "constant": false,
                "id": 408,
                "mutability": "mutable",
                "name": "balance",
                "nameLocation": "255:7:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "248:14:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint96",
                  "typeString": "uint96"
                },
                "typeName": {
                  "id": 407,
                  "name": "uint96",
                  "nodeType": "ElementaryTypeName",
                  "src": "248:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 410,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "401:5:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "393:13:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 409,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "393:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 412,
                "mutability": "mutable",
                "name": "blockedBalance",
                "nameLocation": "509:14:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "502:21:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint96",
                  "typeString": "uint96"
                },
                "typeName": {
                  "id": 411,
                  "name": "uint96",
                  "nodeType": "ElementaryTypeName",
                  "src": "502:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 414,
                "mutability": "mutable",
                "name": "proposedOwner",
                "nameLocation": "618:13:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "610:21:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 413,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "610:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 417,
                "mutability": "mutable",
                "name": "consumers",
                "nameLocation": "699:9:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "689:19:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                  "typeString": "address[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 415,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "689:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 416,
                  "nodeType": "ArrayTypeName",
                  "src": "689:9:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                    "typeString": "address[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 419,
                "mutability": "mutable",
                "name": "flags",
                "nameLocation": "788:5:7",
                "nodeType": "VariableDeclaration",
                "scope": 420,
                "src": "780:13:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 418,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "780:7:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Subscription",
            "nameLocation": "229:12:7",
            "nodeType": "StructDefinition",
            "scope": 576,
            "src": "222:636:7",
            "visibility": "public"
          },
          {
            "canonicalName": "IFunctionsSubscriptions.Consumer",
            "id": 427,
            "members": [
              {
                "constant": false,
                "id": 422,
                "mutability": "mutable",
                "name": "allowed",
                "nameLocation": "889:7:7",
                "nodeType": "VariableDeclaration",
                "scope": 427,
                "src": "884:12:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 421,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "884:4:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 424,
                "mutability": "mutable",
                "name": "initiatedRequests",
                "nameLocation": "998:17:7",
                "nodeType": "VariableDeclaration",
                "scope": 427,
                "src": "991:24:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 423,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "991:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 426,
                "mutability": "mutable",
                "name": "completedRequests",
                "nameLocation": "1083:17:7",
                "nodeType": "VariableDeclaration",
                "scope": 427,
                "src": "1076:24:7",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                },
                "typeName": {
                  "id": 425,
                  "name": "uint64",
                  "nodeType": "ElementaryTypeName",
                  "src": "1076:6:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Consumer",
            "nameLocation": "869:8:7",
            "nodeType": "StructDefinition",
            "scope": 576,
            "src": "862:325:7",
            "visibility": "public"
          },
          {
            "documentation": {
              "id": 428,
              "nodeType": "StructuredDocumentation",
              "src": "1191:210:7",
              "text": "@notice Get details about a subscription.\n @param subscriptionId - the ID of the subscription\n @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure"
            },
            "functionSelector": "a47c7696",
            "id": 436,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSubscription",
            "nameLocation": "1413:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 431,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 430,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "1436:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 436,
                  "src": "1429:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 429,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1429:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1428:23:7"
            },
            "returnParameters": {
              "id": 435,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 434,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 436,
                  "src": "1475:19:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Subscription_$420_memory_ptr",
                    "typeString": "struct IFunctionsSubscriptions.Subscription"
                  },
                  "typeName": {
                    "id": 433,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 432,
                      "name": "Subscription",
                      "nameLocations": [
                        "1475:12:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 420,
                      "src": "1475:12:7"
                    },
                    "referencedDeclaration": 420,
                    "src": "1475:12:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Subscription_$420_storage_ptr",
                      "typeString": "struct IFunctionsSubscriptions.Subscription"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1474:21:7"
            },
            "scope": 576,
            "src": "1404:92:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 437,
              "nodeType": "StructuredDocumentation",
              "src": "1500:355:7",
              "text": "@notice Retrieve details about multiple subscriptions using an inclusive range\n @param subscriptionIdStart - the ID of the subscription to start the range at\n @param subscriptionIdEnd - the ID of the subscription to end the range at\n @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure"
            },
            "functionSelector": "ec2454e5",
            "id": 448,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSubscriptionsInRange",
            "nameLocation": "1867:23:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 442,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 439,
                  "mutability": "mutable",
                  "name": "subscriptionIdStart",
                  "nameLocation": "1903:19:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 448,
                  "src": "1896:26:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 438,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1896:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 441,
                  "mutability": "mutable",
                  "name": "subscriptionIdEnd",
                  "nameLocation": "1935:17:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 448,
                  "src": "1928:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 440,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1928:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1890:66:7"
            },
            "returnParameters": {
              "id": 447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 446,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 448,
                  "src": "1980:21:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Subscription_$420_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IFunctionsSubscriptions.Subscription[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 444,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 443,
                        "name": "Subscription",
                        "nameLocations": [
                          "1980:12:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 420,
                        "src": "1980:12:7"
                      },
                      "referencedDeclaration": 420,
                      "src": "1980:12:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Subscription_$420_storage_ptr",
                        "typeString": "struct IFunctionsSubscriptions.Subscription"
                      }
                    },
                    "id": 445,
                    "nodeType": "ArrayTypeName",
                    "src": "1980:14:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Subscription_$420_storage_$dyn_storage_ptr",
                      "typeString": "struct IFunctionsSubscriptions.Subscription[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1979:23:7"
            },
            "scope": 576,
            "src": "1858:145:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 449,
              "nodeType": "StructuredDocumentation",
              "src": "2007:268:7",
              "text": "@notice Get details about a consumer of a subscription.\n @param client - the consumer contract address\n @param subscriptionId - the ID of the subscription\n @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure"
            },
            "functionSelector": "674603d0",
            "id": 459,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getConsumer",
            "nameLocation": "2287:11:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 451,
                  "mutability": "mutable",
                  "name": "client",
                  "nameLocation": "2307:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 459,
                  "src": "2299:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 450,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2299:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 453,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "2322:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 459,
                  "src": "2315:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "2315:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2298:39:7"
            },
            "returnParameters": {
              "id": 458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 457,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 459,
                  "src": "2361:15:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Consumer_$427_memory_ptr",
                    "typeString": "struct IFunctionsSubscriptions.Consumer"
                  },
                  "typeName": {
                    "id": 456,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 455,
                      "name": "Consumer",
                      "nameLocations": [
                        "2361:8:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 427,
                      "src": "2361:8:7"
                    },
                    "referencedDeclaration": 427,
                    "src": "2361:8:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Consumer_$427_storage_ptr",
                      "typeString": "struct IFunctionsSubscriptions.Consumer"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2360:17:7"
            },
            "scope": 576,
            "src": "2278:100:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 460,
              "nodeType": "StructuredDocumentation",
              "src": "2382:142:7",
              "text": "@notice Get details about the total amount of LINK within the system\n @return totalBalance - total Juels of LINK held by the contract"
            },
            "functionSelector": "12b58349",
            "id": 465,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTotalBalance",
            "nameLocation": "2536:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2551:2:7"
            },
            "returnParameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 463,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "2577:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 462,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "2577:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2576:8:7"
            },
            "scope": 576,
            "src": "2527:58:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 466,
              "nodeType": "StructuredDocumentation",
              "src": "2589:137:7",
              "text": "@notice Get details about the total number of subscription accounts\n @return count - total number of subscriptions in the system"
            },
            "functionSelector": "66419970",
            "id": 471,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSubscriptionCount",
            "nameLocation": "2738:20:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 467,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2758:2:7"
            },
            "returnParameters": {
              "id": 470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 471,
                  "src": "2784:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "2784:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2783:8:7"
            },
            "scope": 576,
            "src": "2729:63:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 472,
              "nodeType": "StructuredDocumentation",
              "src": "2796:301:7",
              "text": "@notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\n @param requestsToTimeoutByCommitment - A list of request commitments to time out\n @dev The commitment can be found on the \"OracleRequest\" event created when sending the request."
            },
            "functionSelector": "e82622aa",
            "id": 479,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "timeoutRequests",
            "nameLocation": "3109:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 476,
                  "mutability": "mutable",
                  "name": "requestsToTimeoutByCommitment",
                  "nameLocation": "3165:29:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "3125:69:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Commitment_$1098_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct FunctionsResponse.Commitment[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 474,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 473,
                        "name": "FunctionsResponse.Commitment",
                        "nameLocations": [
                          "3125:17:7",
                          "3143:10:7"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1098,
                        "src": "3125:28:7"
                      },
                      "referencedDeclaration": 1098,
                      "src": "3125:28:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Commitment_$1098_storage_ptr",
                        "typeString": "struct FunctionsResponse.Commitment"
                      }
                    },
                    "id": 475,
                    "nodeType": "ArrayTypeName",
                    "src": "3125:30:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Commitment_$1098_storage_$dyn_storage_ptr",
                      "typeString": "struct FunctionsResponse.Commitment[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3124:71:7"
            },
            "returnParameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3204:0:7"
            },
            "scope": 576,
            "src": "3100:105:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 480,
              "nodeType": "StructuredDocumentation",
              "src": "3209:301:7",
              "text": "@notice Oracle withdraw LINK earned through fulfilling requests\n @notice If amount is 0 the full balance will be withdrawn\n @notice Both signing and transmitting wallets will have a balance to withdraw\n @param recipient where to send the funds\n @param amount amount to withdraw"
            },
            "functionSelector": "66316d8d",
            "id": 487,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "oracleWithdraw",
            "nameLocation": "3522:14:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 482,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3545:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3537:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 481,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3537:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 484,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3563:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 487,
                  "src": "3556:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 483,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "3556:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3536:34:7"
            },
            "returnParameters": {
              "id": 486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3579:0:7"
            },
            "scope": 576,
            "src": "3513:67:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 488,
              "nodeType": "StructuredDocumentation",
              "src": "3584:287:7",
              "text": "@notice Owner cancel subscription, sends remaining link directly to the subscription owner.\n @dev Only callable by the Router Owner\n @param subscriptionId subscription id\n @dev notably can be called even if there are pending requests, outstanding ones may fail onchain"
            },
            "functionSelector": "02bcc5b6",
            "id": 493,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "ownerCancelSubscription",
            "nameLocation": "3883:23:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 490,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "3914:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 493,
                  "src": "3907:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 489,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3907:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3906:23:7"
            },
            "returnParameters": {
              "id": 492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3938:0:7"
            },
            "scope": 576,
            "src": "3874:65:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 494,
              "nodeType": "StructuredDocumentation",
              "src": "3943:156:7",
              "text": "@notice Recover link sent with transfer instead of transferAndCall.\n @dev Only callable by the Router Owner\n @param to address to send link to"
            },
            "functionSelector": "e72f6e30",
            "id": 499,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "recoverFunds",
            "nameLocation": "4111:12:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 497,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 496,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "4132:2:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 499,
                  "src": "4124:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 495,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4124:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4123:12:7"
            },
            "returnParameters": {
              "id": 498,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4144:0:7"
            },
            "scope": 576,
            "src": "4102:43:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 500,
              "nodeType": "StructuredDocumentation",
              "src": "4149:393:7",
              "text": "@notice Create a new subscription.\n @return subscriptionId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(ROUTER),\n @dev    amount,\n @dev    abi.encode(subscriptionId));"
            },
            "functionSelector": "a21a23e4",
            "id": 505,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createSubscription",
            "nameLocation": "4554:18:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4572:2:7"
            },
            "returnParameters": {
              "id": 504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 503,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 505,
                  "src": "4593:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 502,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "4593:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4592:8:7"
            },
            "scope": 576,
            "src": "4545:56:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 506,
              "nodeType": "StructuredDocumentation",
              "src": "4605:412:7",
              "text": "@notice Create a new subscription and add a consumer.\n @return subscriptionId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(ROUTER),\n @dev    amount,\n @dev    abi.encode(subscriptionId));"
            },
            "functionSelector": "cc77470a",
            "id": 513,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createSubscriptionWithConsumer",
            "nameLocation": "5029:30:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 508,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "5068:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 513,
                  "src": "5060:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 507,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5060:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5059:18:7"
            },
            "returnParameters": {
              "id": 512,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 511,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "5103:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 513,
                  "src": "5096:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 510,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5096:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5095:23:7"
            },
            "scope": 576,
            "src": "5020:99:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 514,
              "nodeType": "StructuredDocumentation",
              "src": "5123:220:7",
              "text": "@notice Propose a new owner for a subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"
            },
            "functionSelector": "4b8832d3",
            "id": 521,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "proposeSubscriptionOwnerTransfer",
            "nameLocation": "5355:32:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 519,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 516,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "5395:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "5388:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 515,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5388:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 518,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nameLocation": "5419:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "5411:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 517,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5411:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5387:41:7"
            },
            "returnParameters": {
              "id": 520,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5437:0:7"
            },
            "scope": 576,
            "src": "5346:92:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 522,
              "nodeType": "StructuredDocumentation",
              "src": "5442:209:7",
              "text": "@notice Accept an ownership transfer.\n @param subscriptionId - ID of the subscription\n @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner."
            },
            "functionSelector": "82359740",
            "id": 527,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptSubscriptionOwnerTransfer",
            "nameLocation": "5663:31:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 524,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "5702:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "5695:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 523,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5695:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5694:23:7"
            },
            "returnParameters": {
              "id": 526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5726:0:7"
            },
            "scope": 576,
            "src": "5654:73:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 528,
              "nodeType": "StructuredDocumentation",
              "src": "5731:241:7",
              "text": "@notice Remove a consumer from a Chainlink Functions subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"
            },
            "functionSelector": "9f87fad7",
            "id": 535,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeConsumer",
            "nameLocation": "5984:14:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 530,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "6006:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "5999:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 529,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5999:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "6030:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "6022:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6022:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5998:41:7"
            },
            "returnParameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6048:0:7"
            },
            "scope": 576,
            "src": "5975:74:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 536,
              "nodeType": "StructuredDocumentation",
              "src": "6053:239:7",
              "text": "@notice Add a consumer to a Chainlink Functions subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param consumer - New consumer which can use the subscription"
            },
            "functionSelector": "7341c10c",
            "id": 543,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addConsumer",
            "nameLocation": "6304:11:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 538,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "6323:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 543,
                  "src": "6316:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 537,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "6316:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 540,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "6347:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 543,
                  "src": "6339:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 539,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6339:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6315:41:7"
            },
            "returnParameters": {
              "id": 542,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6365:0:7"
            },
            "scope": 576,
            "src": "6295:71:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 544,
              "nodeType": "StructuredDocumentation",
              "src": "6370:193:7",
              "text": "@notice Cancel a subscription\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param to - Where to send the remaining LINK to"
            },
            "functionSelector": "d7ae1d30",
            "id": 551,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelSubscription",
            "nameLocation": "6575:18:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 549,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "6601:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 551,
                  "src": "6594:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "6594:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 548,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "6625:2:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 551,
                  "src": "6617:10:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 547,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6617:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6593:35:7"
            },
            "returnParameters": {
              "id": 550,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6637:0:7"
            },
            "scope": 576,
            "src": "6566:72:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 552,
              "nodeType": "StructuredDocumentation",
              "src": "6642:410:7",
              "text": "@notice Check to see if there exists a request commitment for all consumers for a given sub.\n @param subscriptionId - ID of the subscription\n @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\n @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\n @dev Used to disable subscription canceling while outstanding request are present."
            },
            "functionSelector": "e82ad7d4",
            "id": 559,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pendingRequestExists",
            "nameLocation": "7064:20:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 555,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 554,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "7092:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "7085:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 553,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "7085:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7084:23:7"
            },
            "returnParameters": {
              "id": 558,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 557,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "7131:4:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 556,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7131:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7130:6:7"
            },
            "scope": 576,
            "src": "7055:82:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 560,
              "nodeType": "StructuredDocumentation",
              "src": "7141:257:7",
              "text": "@notice Set subscription specific flags for a subscription.\n Each byte of the flag is used to represent a resource tier that the subscription can utilize.\n @param subscriptionId - ID of the subscription\n @param flags - desired flag values"
            },
            "functionSelector": "1ded3b36",
            "id": 567,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setFlags",
            "nameLocation": "7410:8:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 565,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "7426:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 567,
                  "src": "7419:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "7419:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 564,
                  "mutability": "mutable",
                  "name": "flags",
                  "nameLocation": "7450:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 567,
                  "src": "7442:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 563,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7442:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7418:38:7"
            },
            "returnParameters": {
              "id": 566,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7465:0:7"
            },
            "scope": 576,
            "src": "7401:65:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 568,
              "nodeType": "StructuredDocumentation",
              "src": "7470:142:7",
              "text": "@notice Get flags for a given subscription.\n @param subscriptionId - ID of the subscription\n @return flags - current flag values"
            },
            "functionSelector": "55fedefa",
            "id": 575,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getFlags",
            "nameLocation": "7624:8:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 571,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 570,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "7640:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 575,
                  "src": "7633:21:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 569,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "7633:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7632:23:7"
            },
            "returnParameters": {
              "id": 574,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 573,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 575,
                  "src": "7679:7:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 572,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7679:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7678:9:7"
            },
            "scope": 576,
            "src": "7615:73:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 577,
        "src": "184:7506:7",
        "usedErrors": []
      }
    ],
    "src": "32:7659:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2023-12-05T10:36:21.621Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptSubscriptionOwnerTransfer(uint64)": {
        "details": "will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.",
        "params": {
          "subscriptionId": "- ID of the subscription"
        }
      },
      "addConsumer(uint64,address)": {
        "details": "Only callable by the Subscription's owner",
        "params": {
          "consumer": "- New consumer which can use the subscription",
          "subscriptionId": "- ID of the subscription"
        }
      },
      "cancelSubscription(uint64,address)": {
        "details": "Only callable by the Subscription's owner",
        "params": {
          "subscriptionId": "- ID of the subscription",
          "to": "- Where to send the remaining LINK to"
        }
      },
      "createSubscription()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));",
        "returns": {
          "_0": "subscriptionId - A unique subscription id."
        }
      },
      "createSubscriptionWithConsumer(address)": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));",
        "returns": {
          "subscriptionId": "- A unique subscription id."
        }
      },
      "getConsumer(address,uint64)": {
        "params": {
          "client": "- the consumer contract address",
          "subscriptionId": "- the ID of the subscription"
        },
        "returns": {
          "_0": "consumer - see IFunctionsSubscriptions.Consumer for more information on the structure"
        }
      },
      "getFlags(uint64)": {
        "params": {
          "subscriptionId": "- ID of the subscription"
        },
        "returns": {
          "_0": "flags - current flag values"
        }
      },
      "getSubscription(uint64)": {
        "params": {
          "subscriptionId": "- the ID of the subscription"
        },
        "returns": {
          "_0": "subscription - see IFunctionsSubscriptions.Subscription for more information on the structure"
        }
      },
      "getSubscriptionCount()": {
        "returns": {
          "_0": "count - total number of subscriptions in the system"
        }
      },
      "getSubscriptionsInRange(uint64,uint64)": {
        "params": {
          "subscriptionIdEnd": "- the ID of the subscription to end the range at",
          "subscriptionIdStart": "- the ID of the subscription to start the range at"
        },
        "returns": {
          "_0": "subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure"
        }
      },
      "getTotalBalance()": {
        "returns": {
          "_0": "totalBalance - total Juels of LINK held by the contract"
        }
      },
      "oracleWithdraw(address,uint96)": {
        "params": {
          "amount": "amount to withdraw",
          "recipient": "where to send the funds"
        }
      },
      "ownerCancelSubscription(uint64)": {
        "details": "Only callable by the Router Ownernotably can be called even if there are pending requests, outstanding ones may fail onchain",
        "params": {
          "subscriptionId": "subscription id"
        }
      },
      "pendingRequestExists(uint64)": {
        "details": "Looping is bounded to MAX_CONSUMERS*(number of DONs).Used to disable subscription canceling while outstanding request are present.",
        "params": {
          "subscriptionId": "- ID of the subscription"
        },
        "returns": {
          "_0": "true if there exists at least one unfulfilled request for the subscription, false otherwise."
        }
      },
      "proposeSubscriptionOwnerTransfer(uint64,address)": {
        "details": "Only callable by the Subscription's owner",
        "params": {
          "newOwner": "- proposed new owner of the subscription",
          "subscriptionId": "- ID of the subscription"
        }
      },
      "recoverFunds(address)": {
        "details": "Only callable by the Router Owner",
        "params": {
          "to": "address to send link to"
        }
      },
      "removeConsumer(uint64,address)": {
        "details": "Only callable by the Subscription's owner",
        "params": {
          "consumer": "- Consumer to remove from the subscription",
          "subscriptionId": "- ID of the subscription"
        }
      },
      "setFlags(uint64,bytes32)": {
        "params": {
          "flags": "- desired flag values",
          "subscriptionId": "- ID of the subscription"
        }
      },
      "timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])": {
        "details": "The commitment can be found on the \"OracleRequest\" event created when sending the request.",
        "params": {
          "requestsToTimeoutByCommitment": "- A list of request commitments to time out"
        }
      }
    },
    "title": "Chainlink Functions Subscription interface.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptSubscriptionOwnerTransfer(uint64)": {
        "notice": "Accept an ownership transfer."
      },
      "addConsumer(uint64,address)": {
        "notice": "Add a consumer to a Chainlink Functions subscription."
      },
      "cancelSubscription(uint64,address)": {
        "notice": "Cancel a subscription"
      },
      "createSubscription()": {
        "notice": "Create a new subscription."
      },
      "createSubscriptionWithConsumer(address)": {
        "notice": "Create a new subscription and add a consumer."
      },
      "getConsumer(address,uint64)": {
        "notice": "Get details about a consumer of a subscription."
      },
      "getFlags(uint64)": {
        "notice": "Get flags for a given subscription."
      },
      "getSubscription(uint64)": {
        "notice": "Get details about a subscription."
      },
      "getSubscriptionCount()": {
        "notice": "Get details about the total number of subscription accounts"
      },
      "getSubscriptionsInRange(uint64,uint64)": {
        "notice": "Retrieve details about multiple subscriptions using an inclusive range"
      },
      "getTotalBalance()": {
        "notice": "Get details about the total amount of LINK within the system"
      },
      "oracleWithdraw(address,uint96)": {
        "notice": "Oracle withdraw LINK earned through fulfilling requestsIf amount is 0 the full balance will be withdrawnBoth signing and transmitting wallets will have a balance to withdraw"
      },
      "ownerCancelSubscription(uint64)": {
        "notice": "Owner cancel subscription, sends remaining link directly to the subscription owner."
      },
      "pendingRequestExists(uint64)": {
        "notice": "Check to see if there exists a request commitment for all consumers for a given sub."
      },
      "proposeSubscriptionOwnerTransfer(uint64,address)": {
        "notice": "Propose a new owner for a subscription."
      },
      "recoverFunds(address)": {
        "notice": "Recover link sent with transfer instead of transferAndCall."
      },
      "removeConsumer(uint64,address)": {
        "notice": "Remove a consumer from a Chainlink Functions subscription."
      },
      "setFlags(uint64,bytes32)": {
        "notice": "Set subscription specific flags for a subscription. Each byte of the flag is used to represent a resource tier that the subscription can utilize."
      },
      "timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])": {
        "notice": "Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled"
      }
    },
    "version": 1
  }
}